-
  name: Install required packages for WireGuard
  ansible.builtin.apt:
    name:
      - wireguard
      - wireguard-tools
      - net-tools
    state: present
    update_cache: yes
  become: true

- name: Enable IPv4 forwarding
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: yes
  become: true

- name: Check if private key exists
  stat:
    path: /etc/wireguard/privatekey
  register: private_key

- name: Generate private key
  command: wg genkey
  args:
    chdir: /etc/wireguard
    creates: /etc/wireguard/privatekey
  when: not private_key.stat.exists
  become: true

- name: Set private key permissions
  file:
    path: /etc/wireguard/privatekey
    owner: root
    group: root
    mode: 0600
  when: not private_key.stat.exists
  become: true

- name: Generate public key
  command: wg pubkey
  args:
    stdin: "{{ lookup('file', '/etc/wireguard/privatekey') }}"
    chdir: /etc/wireguard
    creates: /etc/wireguard/publickey
  register: public_key_output
  when: not private_key.stat.exists
  become: true

- name: Set public key permissions
  file:
    path: /etc/wireguard/publickey
    owner: root
    group: root
    mode: 0644
  when: not private_key.stat.exists
  become: true

- name: Create WireGuard configuration with peers
  ansible.builtin.template:
    src: wg0.conf.j2
    dest: "/etc/wireguard/{{ wireguard_interface }}.conf"
    owner: root
    group: root
    mode: '0600'
  vars:
    private_key_file: /etc/wireguard/privatekey
  become: true

- name: Open WireGuard-Port
  ansible.builtin.import_role:
    name: firewall
    tasks_from: add_rule
  vars:
    fwrule:
      port: "{{ wireguard_port }}"
      rule: allow
      proto: udp

- name: System cleanup
  ansible.builtin.apt:
    autoremove: yes
    autoclean: yes
  become: true