#
# ~/.bashrc
#
# This file is tracked by chezmoi
#

# If not running interactively, don't do anything
[[ $- != *i* ]] && return

# Make colorcoding available for everyone

Black='\[\e[0;30m\]'	# Black
Red='\[\e[0;31m\]'		# Red
Green='\[\e[0;32m\]'	# Green
Yellow='\[\e[0;33m\]'	# Yellow
Blue='\[\e[0;34m\]'		# Blue
Purple='\[\e[0;35m\]'	# Purple
Cyan='\[\e[0;36m\]'		# Cyan
White='\[\e[0;37m\]'	# White

# Bold
BBlack='\[\e[1;30m\]'	# Black
BRed='\[\e[1;31m\]'		# Red
BGreen='\[\e[1;32m\]'	# Green
BYellow='\[\e[1;33m\]'	# Yellow
BBlue='\[\e[1;34m\]'	# Blue
BPurple='\[\e[1;35m\]'	# Purple
BCyan='\[\e[1;36m\]'	# Cyan
BWhite='\[\e[1;37m\]'	# White

# Background
On_Black='\[\e[40m\]'	# Black
On_Red='\[\e[41m\]'		# Red
On_Green='\[\e[42m\]'	# Green
On_Yellow='\[\e[43m\]'	# Yellow
On_Blue='\[\e[44m\]'	# Blue
On_Purple='\[\e[45m\]'	# Purple
On_Cyan='\[\e[46m\]'	# Cyan
On_White='\[\e[47m\]'	# White

NC='\[\e[m\]'			# Color Reset

ALERT="${BWhite}${On_Red}" # Bold White on red background

# Configure History
HISTCONTROL=ignoreboth    # corresponding to ignoredups and ignorespace
HISTSIZE=30000            # Default: 1000
HISTFILESIZE=90000        # Default: 2000
HISTTIMEFORMAT="(%d.%m.%y) "
HISTIGNORE="?:??:???:bash:clear:exit:man*:*--help"

# Export default variables
export EDITOR=nvim

# Useful aliases
alias ..='cd ..'
alias cdg='cd $(git rev-parse --show-toplevel)' # CD into the git root folder
alias c='clear'
alias free='free -mt'
alias grep='grep --color=auto'
alias gcm='git commit -m'
alias gp='git push'
alias gpsu='git push --set-upstream'
alias histg='history | grep'
alias ip='ip --color'
alias ll='eza -la'
alias ls='ls -CF --color=auto'
alias mkdir='mkdir -pv'
alias myip='curl ipv4.icanhazip.com'
alias ps='ps auxf'
alias psgrep='ps aux | grep -v grep | grep -i -e VSZ -e'
alias vim='nvim'
alias wget='wget -c'

# Easy search in history
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

# Set PATH so it includes user's private bin directories
PATH="${HOME}/bin:${HOME}/.local/bin:${PATH}"

# Set prompt
function shorten_path {
    local org_path=$(pwd)
    org_path=${org_path/#$HOME/\~}

    local shortened_path current_length
    current_length=${#org_path}

    if git rev-parse --show-toplevel > /dev/null 2>&1; then
      git_root=$(git rev-parse --show-toplevel)

      # Extract the base folder name of the Git root directory
      git_base=$(basename "$git_root")
    fi

    while [[ $org_path != "${org_path//\/}" ]] && ((current_length > 20))
    do
        # Remove the leading slash from the original path
        org_path=${org_path#/}

        # Check if the current segment matches the Git base folder name
        if [[ "$git_base" == "${org_path%%/*}" ]]; then
            # Preserve the full Git base folder name
            shortened_path=$shortened_path/$git_base
        else
          # Extract the first character of the current segment
          [[ $org_path =~ \.?. ]]

          # Append these characters to the shortened path, unless it's the Git root folder
          shortened_path=$shortened_path/${BASH_REMATCH[0]}
        fi

        # Remove the next segment up to the next slash
        org_path=${org_path#*/}

        # Update the current length of the combined string
        ((current_length=${#shortened_path}+${#org_path}))
    done

    # Gib den gekürzten Pfad aus
    printf -- "${shortened_path/\/~/\~}${shortened_path+/}$org_path"
    return 0
}

function __prompt_command {
  local EXIT="$?"
  PS1=""

  # Coloring
  local Green Blue Red Cyan Yellow NC
  Green='\[\e[32m\]'
  Yellow='\[\e[33m\]'
  Red='\[\e[31m\]'
  Blue='\[\e[34m\]'
  Cyan='\[\e[36m\]'

  NC='\[\e[m\]' # Reset to default

  PS1+="\n┍ $Green\u@\h$NC: "
  PS1+="$Yellow$(shorten_path)$NC "

  # Check if it is git repository
  local repo_info
  repo_info="$(git rev-parse --git-dir --is-inside-git-dir \
		--is-bare-repository --is-inside-work-tree --show-ref-format \
		--short HEAD 2>/dev/null)"

  if ! [ -z "$repo_info" ]; then
    PS1+="$Cyan($(git branch --show current)"

    # add information about merge in progress
    local check_merge merge_result
    check_merge="$(git merge HEAD &> /dev/null)"
    merge_result="$?"

    if [ $merge_result -ne 0 ]; then
      PS1+="|MERGING"
    fi

    # show conflicts
    if [ "$(git ls-files --unmerged 2>/dev/null)" ]; then
      PS1+="|CONFLICT"
    fi

    PS1+=")$NC "
  fi

  if [ $EXIT -ne 0 ]; then
    PS1+="$Red X $NC"
  fi

  PS1+="\n┕ \\$ "
}

PROMPT_COMMAND="history -a;__prompt_command"

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

# Adding support for Zoxid (z command)
[ -f /usr/bin/zoxide ] && eval "$(zoxide init bash)"
