---
- name: Create main user group {{ __user.group.name }}
  ansible.builtin.group:
    name: "{{ __user.group.name }}"
    gid: "{{ __user.group.gid | default(omit)}}"
    force: "{{ __user.group.force | default(omit) }}"
    state: present
    system: "{{ __user.group.system | default(omit) }}"
  become: true

- name: Create local groups for user
  ansible.builtin.group:
    name: "{{ __group.name }}"
    gid: "{{ __group.gid | default(omit) }}"
    force: "{{ __group.force | default(omit) }}"
    state: present
    system: "{{ __group.system | default(omit) }}"
  become: true
  loop_control:
    loop_var: __group
  loop: "{{ __user.groups }}"
  when: __user.groups is defined

- name: Create local user {{ __user.name }}
  ansible.builtin.user:
    name: "{{ __user.name }}"
    comment: "{{ __user.comment | default(omit) }}"
    # Check if Password is already hashed
    # else hash the password
    # omit if the password is not defined
    password: "{{ hashed_userpassword if __user.password is defined else omit }}"
    uid: "{{ __user.uid | default(omit) }}"
    group: "{{ __user.group.name }}"
    groups: "{{ ( __user.groups | map(attribute='name') | list ) if __user.groups is defined else '' }}"
    home: "{{ __user.home | default(omit) }}"
    shell: "{{ __user.shell | default(omit) }}"
    update_password: "{{ __user.update_password | default('on_create' if __user.password is defined else omit) }}"
  become: true
  vars:
    hashed_userpassword: "{{ (__user.password if __user.password is match('^\\$\\d\\$') else ( __user.password | password_hash('sha512'))) | default('omit') }}"

- name: Add ssh keys to authorized_keys
  ansible.posix.authorized_key:
    user: "{{ user.name }}"
    state: present
    key: "{{ authorized_key }}"
  become: true
  loop_control:
    loop_var: authorized_key
  loop: "{{ __user.authorized_keys }}"
  when: __user.authorized_keys is defined